from dataclasses import dataclass, field
import pandas as pd
import panel as pn
import param

@dataclass
class SubModel:
    text1: str = ""
    text2: str = ""
    text3: str = ""
    option: str = "Option 1"

@dataclass
class Model:
    foo: list = field(default_factory=list)

class DynamicDashboard(param.Parameterized):
    file_path = param.String()
    add_button = param.Action(lambda x: x.add_row(), label='Add Row')
    
    def __init__(self, model, **params):
        super(DynamicDashboard, self).__init__(**params)
        self.model = model
        self.load_button = pn.widgets.Button(name='Load Data', button_type='primary')
        self.load_button.on_click(self.load_data)
        self.dynamic_controls = []
        
    def load_data(self, event):
        self.df = pd.read_parquet(self.file_path)
        
    def add_row(self):
        new_submodel = SubModel()
        self.model.foo.append(new_submodel)

        remove_button = pn.widgets.Button(name='X', button_type='danger', width=50)
        
        text_box1 = pn.widgets.TextInput(name='Text 1', value=new_submodel.text1)
        text_box2 = pn.widgets.TextInput(name='Text 2', value=new_submodel.text2)
        text_box3 = pn.widgets.TextInput(name='Text 3', value=new_submodel.text3)
        dropdown = pn.widgets.Select(name='Select Option', options=['Option 1', 'Option 2'], value=new_submodel.option)

        new_row = pn.Row(remove_button, text_box1, text_box2, text_box3, dropdown)
        
        def remove_row(event):
            self.model.foo.remove(new_submodel)
            self.dynamic_controls.remove(new_row)
        
        remove_button.on_click(remove_row)
        
        self.dynamic_controls.append(new_row)
        
    @param.depends('add_button')
    def view_dynamic_controls(self):
        return pn.Column(*self.dynamic_controls)
        
    def view(self):
        return pn.Column(
            pn.Row("File Path:", self.param.file_path, self.load_button),
            self.param.add_button,
            self.view_dynamic_controls
        )
    
if __name__ == "__main__":
    model = Model()
    dashboard = DynamicDashboard(model=model)
    pn.serve(dashboard.view)
